import ctypes
import os
import math
import numpy as np
import pathlib
import gym
from gym import spaces


class DIPBasic(gym.Env):
    """
    TODO: to be adapted to DIP
    Custom Environment that follows gym interface
    Description:
        A pole is attached by an un-actuated joint to a cart, which moves along
        a track. The pendulum starts upright, and the goal is to
        prevent it from falling over by increasing and reducing the cart's
        velocity.

    Source:
        Simulink modell from IAT-Institute

    Observation:
        Type: Box(5)
        Num     Observation               Min                       Max

        0       Pole Angle                -pi [rad]                 pi [rad]
        1       Pole Angular Velocity     -20 [rad/s]               20 [rad/s]
        2       Cart Position             -0.5 [m]                  0.5 [m]
        3       Cart Velocity             -10 [m/s]                 10 [m/s]
        4       Driver Force              -300 [N]                  300 [N]
        5       Integrator                -10 []                    10 []
        6       Last action               -5 [m/s]                  5 [m/s]
    Info:
        Each step has a duration of 1 ms. So taking more (maybe 10) steps in a row might be a good idea.

    Actions:
        Type: Box(1)
        Num     Observation               Min                       Max
        0       Velocity                  -5 [m/s]                  20 [m/s]
    States:
        Type: c_data_type
        Name            Type                  Min                  Max
        alpha_0         float32
        d_alpha_0       float32
        x_0             float32
        v_0             float32
        sample_time     int
        latency         int                   0                     1
            Reward:
        New Reward! Not explained yet

    Starting State:
        #Initialize all states and starting positions as random values in between something

    Episode Termination:
        Pole Angle is more than x degrees.
        Cart Position is more than 0.5 m (center of the cart reaches the edge of
        the display).


    """
    metadata = {"render.modes": ["human", "rgb_array"], "video.frames_per_second": 30}

    def __init__(self,):
        self.cart_mass = 0.5
        self.pendulum_mass_1 = 0.162
        self.pendulum_mass_2 = 0.203
        self.total_mass = self.cart_mass + self.pendulum_mass_1 + self.pendulum_mass_2
        self.pendulum_length_1 = 0.170
        self.pendulum_cg_1 = 0.085
        self.pendulum_length_2 = 0.314
        self.pendulum_cg_2 = 0.157
        self.gravity = 9.81
        self.inertia_1 = (self.pendulum_mass_1 * (self.pendulum_length_1 ** 2)) / 12
        self.inertia_2 = (self.pendulum_mass_2 * (self.pendulum_length_2 ** 2)) / 12
        self.tau = 0.0395
        self.i_render = 0
        self.render_step = 5

        self.x_goal_position = 0
        # self.kinematics_integrator = 'euler'
        self.viewer = None
        self.scale = 100  # Scale factor for converting coordinates to pixels
        # self.seed()
        # self.state = None #arr2mat
        self.steps_beyond_done = None
        self.x_threshold = 0.5

        # Observation space and limits
        self.x_min = -(self.x_threshold * 2)
        self.x_max = (self.x_threshold * 2)
        self.theta_min = -np.finfo(np.float32).max
        self.theta_max = np.finfo(np.float32).max
        self.velocity_min = -np.finfo(np.float32).max
        self.velocity_max = np.finfo(np.float32).max

        self.min_observation = np.array([self.velocity_min, self.velocity_min,
                                         self.theta_min,
                                         self.theta_min, self.x_min, self.velocity_min],
                                        dtype=np.float32)

        self.max_observation = np.array([self.velocity_max, self.velocity_max,
                                         self.theta_max, self.theta_max, self.x_max, self.velocity_max],
                                        dtype=np.float32)

        self.observation_space = spaces.Box(low=self.min_observation,
                                            high=self.max_observation,
                                            dtype=np.float32)
        self.min_action = -1  # min cart force, min rope force
        self.max_action = 1  # max cart force, max rope force

        self.action_space = spaces.Box(low=self.min_action,
                                       high=self.max_action,
                                       shape=(1,),
                                       dtype=np.float32)
        self.x_goal_position = 0
        self.tau1 = 0.02  # Time step for the simulation
        self.counter = 0  # Taken from fregu856
        self.h1 = self.cart_mass + self.pendulum_mass_1 + self.pendulum_mass_2
        self.h2 = self.pendulum_mass_1 * self.pendulum_cg_1 + self.pendulum_mass_2 * self.pendulum_length_1
        self.h3 = self.pendulum_mass_2 * self.pendulum_cg_2
        self.h4 = self.pendulum_mass_1 * (self.pendulum_cg_1 ** 2) + self.pendulum_mass_2 * (
                self.pendulum_length_1 ** 2) + self.inertia_1
        self.h5 = self.pendulum_mass_2 * self.pendulum_cg_2 * self.pendulum_length_1
        self.h6 = self.pendulum_mass_2 * (self.pendulum_cg_2 ** 2) + self.inertia_2
        self.h7 = self.pendulum_mass_1 * self.pendulum_cg_1 * self.gravity + self.pendulum_mass_2 * self.pendulum_length_1 * self.gravity
        self.h8 = self.pendulum_mass_2 * self.pendulum_cg_2 * self.gravity

        self._configure()

    def _configure(self, display=None):
        self.display = display

    def step(self, action):
        """
        Take one simulation step
        :param action: np.array([], dtype=np.float32) with dimensions [1,]
        :return:
        """
        done = False
        info = {}
        # assert self.action_space.contains(action), "%r (%s) invalid"%(action, type(action))
        state = self.state
        theta_dot = state.item(0)
        phi_dot = state.item(1)
        theta = state.item(2)
        phi = state.item(3)
        x = state.item(4)
        x_dot = state.item(5)

        u = action
        self.counter += 1

        # print("Count: ", self.counter)

        def func(state, u):
            theta_dot = state.item(0)
            phi_dot = state.item(1)
            theta = state.item(2)
            phi = state.item(3)
            x = state.item(4)
            x_dot = state.item(5)
            state = np.matrix([[theta_dot], [phi_dot], [theta], [phi], [x], [x_dot]])
            # print("Stateshape_initial:", state.shape)

            # Constants for calculating a(Q) and B(Q)
            M11 = np.matrix([[self.h4, self.h5 * np.cos(theta - phi)], [self.h5 * np.cos(theta - phi), self.h6]])
            M12 = np.matrix([[self.h2 * np.cos(theta)], [self.h3 * np.cos(phi)]])
            C1 = np.matrix([[self.h5 * np.sin(theta - phi) * ((phi_dot) ** 2)],
                            [-self.h5 * np.sin(theta - phi) * ((theta_dot) ** 2)]])
            G1 = np.matrix([[-self.h7 * np.sin(theta)], [-self.h8 * np.sin(phi)]])

            D = np.matrix([[self.h1, self.h2 * np.cos(theta), self.h3 * np.cos(phi)],
                           [self.h2 * np.cos(theta), self.h4, self.h5 * np.cos(theta - phi)],
                           [self.h3 * np.cos(phi), self.h5 * np.cos(theta - phi), self.h6]])

            G = np.matrix([[0], [-self.h7 * np.sin(theta)], [-self.h8 * np.sin(phi)]])

            H = np.matrix([[1], [0], [0]])

            I = np.matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])

            O_3_3 = np.matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]])

            O_3_1 = np.matrix([[0], [0], [0]])

            M11_inv = np.linalg.inv(M11)
            M12_mul = np.dot(M12, (-x_dot / self.tau))
            C1_G1_sum = C1 + G1
            MCG = (M12_mul + C1_G1_sum)
            result1 = np.dot(-M11_inv, MCG)  # matrix calculation in A matrix
            M12_div = (M12 / self.tau)
            result2 = np.dot(-M11_inv, M12_div)  # matrix calculation in B matrix
            a_Q = np.matrix([[result1[0, 0]], [result1[1, 0]], [theta_dot], [phi_dot], [x_dot], [-x_dot / self.tau]])
            B_Q = np.matrix([[result2[0, 0]], [result2[1, 0]], [0], [0], [0], [1 / self.tau]])
            Q_dot = a_Q + B_Q * u  # + W
            return Q_dot

        state_dot = func(state, u)
        state_dot_new = np.matrix(state_dot)
        self.state = (np.reshape(self.state, (6,1)) + self.tau1 * state_dot_new)  # np.array([state_dot[0],state_dot[1],state_dot[2],state_dot[3],state_dot[4],state_dot[5]])
        self.state = np.squeeze(self.state)

        flag = self.x_goal_position
        reward = 0
        alive_bonus = 10
        x_tip = x + self.pendulum_length_1 * np.sin(theta) + self.pendulum_length_2 * np.sin(phi)
        y_tip = self.pendulum_length_1 * np.cos(theta) + self.pendulum_length_2 * np.cos(phi)
        dist_penalty = (0.01 * (x_tip - flag) ** 2) + ((((y_tip - 0.464))) ** 2) + 0.5 * (
                1 - np.exp(-1 * (0.5 * (0.5 ** 2 * ((x - flag) ** 2)))))
        velocity_penalty = (0.001 * (theta_dot ** 2)) + (0.001 * (phi_dot) ** 2) + (0.005 * (x_dot ** 2))

        reward = alive_bonus - dist_penalty - velocity_penalty
        # done=  bool( )
        done = bool(
            x < -self.x_threshold or x > self.x_threshold)  # or theta > 90*2*np.pi/360  or theta < -90*2*np.pi/360)
        if done:
            print("Self.counter: ", self.counter)
            if x < -self.x_threshold or x > self.x_threshold:
                reward = -50

        if (
                x > flag - 0.1 and x < flag + 0.1
                and x_dot > -0.1 and x_dot < 0.1
                and theta_dot > -0.05 and theta_dot < 0.05
                and np.sin(theta) > -0.05 and np.sin(theta) < 0.05
                and phi_dot > -0.05 and phi_dot < 0.05
                and np.sin(phi) > -0.05 and np.sin(phi) < 0.05
                and self.counter > 1000
        ):
            reward += 10000.0

        if (
                y_tip > 0 and y_tip < 0.2
        ):
            reward += 50.0
        if (
                y_tip > 0.2 and y_tip < 0.4
        ):
            reward += 150.0

        if (
                y_tip > 0.4 and y_tip <= 0.464
        ):
            reward += 150.0

        if (x < -self.x_threshold or x > self.x_threshold):
            reward -= 100.0

        return self.state, reward, done, {}

    def render(self):
        """
        renders the polecart
        :param mode: mode='human'
        :return:
        """
        # to increase performance render only every "render_step"
        if self.i_render % self.render_step == 0:
            screen_width = 800
            screen_height = 600
            mode = 'human'
            world_width = self.x_threshold * 2
            scale = screen_width / world_width
            carty = 300  # TOP OF CART
            polewidth = 10.0
            polelen = scale * 0.1
            cartwidth = 50.0
            cartheight = 30.0

            if self.viewer is None:
                from gym.envs.classic_control import rendering
                self.viewer = rendering.Viewer(screen_width, screen_height)
                self.viewer = rendering.Viewer(screen_width, screen_height, display=self.display)
                l, r, t, b = -cartwidth / 2, cartwidth / 2, cartheight / 2, -cartheight / 2
                axleoffset = cartheight / 4.0
                cart = rendering.FilledPolygon([(l, b), (l, t), (r, t), (r, b)])
                self.carttrans = rendering.Transform()
                cart.add_attr(self.carttrans)
                self.viewer.add_geom(cart)
                l, r, t, b = -polewidth / 2, polewidth / 2, polelen - polewidth / 2, -polewidth / 2
                pole = rendering.FilledPolygon([(l, b), (l, t), (r, t), (r, b)])
                pole.set_color(.8, .6, .4)
                self.poletrans = rendering.Transform(translation=(0, axleoffset))
                pole.add_attr(self.poletrans)
                pole.add_attr(self.carttrans)
                self.viewer.add_geom(pole)
                self.axle = rendering.make_circle(polewidth / 2)
                self.axle.add_attr(self.poletrans)
                self.axle.add_attr(self.carttrans)
                self.axle.set_color(.5, .5, .8)
                self.viewer.add_geom(self.axle)

                l, r, t, b = -polewidth / 2, polewidth / 2, polelen - polewidth / 2, -polewidth / 2
                pole2 = rendering.FilledPolygon([(l, b), (l, t), (r, t), (r, b)])
                pole2.set_color(.2, .6, .4)
                self.poletrans2 = rendering.Transform(translation=(0, polelen - 5))
                pole2.add_attr(self.poletrans2)
                pole2.add_attr(self.poletrans)
                pole2.add_attr(self.carttrans)
                self.viewer.add_geom(pole2)
                self.axle2 = rendering.make_circle(polewidth / 2)
                self.axle2.add_attr(self.poletrans2)
                self.axle2.add_attr(self.poletrans)
                self.axle2.add_attr(self.carttrans)
                self.axle2.set_color(.1, .5, .8)
                self.viewer.add_geom(self.axle2)

                self.track = rendering.Line((0, carty), (screen_width, carty))
                self.track.set_color(0, 0, 0)
                self.viewer.add_geom(self.track)
                state = self.state
                cartx = state.item(4) * scale + screen_width / 2.0  # MIDDLE OF CART
                self.carttrans.set_translation(cartx, carty)
                self.poletrans.set_rotation(-state.item(2))
                self.poletrans2.set_rotation(-(state.item(3) - state.item(2)))

            return self.viewer.render(return_rgb_array=mode == "rgb_array")

    def reset(self, seed=None):
        """
        Resets the environment
        :return:
        """
        # Reset the state
        self.state = np.array([
            np.random.uniform(low=0, high=0),  # theta1_dot
            np.random.uniform(low=0, high=0),  # phi_dot
            np.random.uniform(low=np.pi, high=np.pi),  # theta1
            np.random.uniform(low=np.pi, high=np.pi),  # phi
            np.random.uniform(low=0, high=0),  # x
            np.random.uniform(low=0, high=0),  # x_dot
        ])

        self.steps_beyond_done = None
        self.counter = 0
        return self.state

    def close(self):
        """
        Close function normally closes the viewer for rendering
        :return:
        """
        plt.close()
        if self.viewer:
            self.viewer.close()
            self.viewer = None



def c_data_type(n):
    """Function needed to define different ctypes"""
    return ctypes.c_double * n

def normalize_angle(angle):
    """
    3*pi gives -pi, 4*pi gives 0 etc, etc. (returns the negative difference
    from the closest multiple of 2*pi)
    """
    normalized_angle = abs(angle)
    normalized_angle = normalized_angle % (2 * np.pi)
    if normalized_angle > np.pi:
        normalized_angle = normalized_angle - 2 * np.pi
    normalized_angle = abs(normalized_angle)
    return normalized_angle

